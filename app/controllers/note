class StripeMailer < ActionMailer::Base
  default from: "info@reelmovement.com"

  def new_member(user)
     @user = user
    mail(to:  @user.email, subject: 'Welcome to Reel Movement')
  end


  def welcome_email(user)
     @user = user
    mail(to: @user.email, subject: "Thanks for purchasing")
  end

 def failed_charge(user)
     @user = user
    mail(to: @user.email, subject: 'failed payment')
  end

  def updated_info(user)
  	@user = user
    mail(to: @user.email, subject: 'Thanks for updating your infomation')
  end

  def user_deleted(user)

  	@user = user
    mail(to: @user.email, subject: 'failed payment')
  	
  end

  def dispute(user)
  	@user = user
    mail(to: 'daniel.ponce@reelmovement.com', subject: 'oh no we are having some problems')
  end

  def dispute_updated(user)
  	@user = user
    mail(to: 'daniel.ponce@reelmovement.com', subject: 'dispute updated')
  end

  def funds_reinstated(user)
  	@user = user
    mail(to: 'daniel.ponce@reelmovement.com', subject: 'Woo! you got your money back')
  end

  def funds_withdrawn(user)
  	@user = user
    mail(to: 'daniel.ponce@reelmovement.com', subject: ':( looks like we lost this one')
  end

  def dispute_closed(user)
  	@user = user
    mail(to: 'daniel.ponce@reelmovement.com', subject: 'dispute is closed brother')
  end
end






protect_from_forgery :except => :webhook
  # Method responsbile for handling stripe webhooks
# reference https://stripe.com/docs/webhooks
def webhook

  begin
    event_json = JSON.parse(request.body.read)
    event_object = event_json['data']['object']
    #refer event types here https://stripe.com/docs/api#event_types
    case event_json['type']
      when 'invoice.payment_succeeded'
        
      when 'invoice.payment_failed' #credit card does not go through
       
      when 'charge.failed'
        StripeMailer.failed_charge(@user).deliver_now
      when 'charge.succeeded'
        
        when 'customer.created'
          StripeMailer.new_member(@user).deliver_now
          StripeMailer.welcome_email(@user).deliver_now
           StripeMailer.updated_info(@user).deliver_now
            StripeMailer.dispute(@user).deliver_now
        
      when 'customer.deleted'
        StripeMailer.user_deleted(@user).deliver_now
      when 'customer.subscription.updated'
    end
  rescue Exception => ex
    render :json => {:status => 422, :error => "Webhook call failed"}
    return
  end
  render :json => {:status => 200}
end
 


 StripeEvent.event_retriever = lambda do |params|
  return nil if StripeWebhook.exists?(stripe_id: params[:id])
  StripeWebhook.create!(stripe_id: params[:id])
  Stripe::Event.retrieve(params[:id])
end#

StripeEvent.configure do |events|
  events.subscribe 'customer.created' do |event|
     customer = event.data.object
    StripeMailer.new_member(@user).deliver_now
          StripeMailer.welcome_email(@user).deliver_now
          StripeMailer.failed_charge(@user).deliver_now
           StripeMailer.user_deleted(@user).deliver
           StripeMailer.updated_info(@user).deliver
            StripeMailer.dispute(@user).deliver
  end#
  events.subscribe 'charge.failed' do |event|
    customer = event.data.object
    StripeMailer.failed_charge(customer).deliver
end#

 events.subscribe 'customer.updated' do |event|
    customer = event.data.object
    StripeMailer.updated_info(customer).deliver
   
end#
 events.subscribe 'customer.deleted' do |event|
    customer = event.data.object
    StripeMailer.user_deleted(@user).deliver
end#
 events.subscribe 'charge.dispute.created' do |event|
    customer = event.data.object
    StripeMailer.dispute(customer).deliver
    
end#
events.subscribe 'charge.dispute.updated' do |event|
    customer = event.data.object
    StripeMailer.dispute_updated(customer).deliver
   
end#

events.subscribe 'charge.dispute.funds_reinstated' do |event|
    customer = event.data.object
    StripeMailer.funds_reinstated(customer).deliver
    
end#

events.subscribe 'charge.dispute.funds_withdrawn' do |event|
    customer = event.data.object
    StripeMailer.funds_withdrawn(customer).deliver
   
end#

events.subscribe 'charge.dispute.closed' do |event|
    customer = event.data.object
    StripeMailer.dispute_closed(customer).deliver
  
end#
end#
